import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs';
import { dirname, join } from 'node:path';
import { cwd } from 'node:process';
import config, { BLUEPRINT_CONFIG_FILE, BLUEPRINT_CONFIG_VERSION, BLUEPRINT_DIR, } from '../../config.js';
import { getProject } from '../sanity/projects.js';
export function readConfigFile(blueprintFilePath) {
    const blueprintDir = blueprintFilePath ? dirname(blueprintFilePath) : cwd();
    const configPath = join(blueprintDir, BLUEPRINT_DIR, BLUEPRINT_CONFIG_FILE);
    if (existsSync(configPath)) {
        try {
            const config = JSON.parse(readFileSync(configPath, 'utf8'));
            return { configPath, ...config };
        }
        catch {
            return null;
        }
    }
    return null;
}
export function writeConfigFile({ blueprintFilePath, organizationId, projectId, stackId, }) {
    const blueprintDir = blueprintFilePath ? dirname(blueprintFilePath) : cwd();
    const configDir = join(blueprintDir, BLUEPRINT_DIR);
    const configPath = join(configDir, BLUEPRINT_CONFIG_FILE);
    if (!existsSync(configDir)) {
        mkdirSync(configDir, { recursive: true });
    }
    let config = {};
    if (existsSync(configPath)) {
        try {
            config = JSON.parse(readFileSync(configPath, 'utf8'));
        }
        catch {
            // config broken, start fresh
        }
    }
    if (organizationId)
        config.organizationId = organizationId;
    if (projectId)
        config.projectId = projectId;
    if (stackId)
        config.stackId = stackId;
    config.blueprintConfigVersion = BLUEPRINT_CONFIG_VERSION;
    config.updatedAt = Date.now();
    writeFileSync(configPath, JSON.stringify(config, null, 2));
}
/**
 * Find and write an organizationId to the config file by getting it from the projectId
 * @throws {Error} if unable to fetch project
 * @returns {Promise<string>} the discovered organizationId
 */
export async function backfillOrganizationId({ blueprintFilePath, projectId, }) {
    const token = config.token;
    if (!token)
        throw new Error('No token found');
    let organizationId;
    try {
        const response = await getProject({ token, scopeType: 'project', scopeId: projectId });
        if (!response.ok)
            throw new Error('Failed to get project');
        if (!response.project)
            throw new Error('No project found');
        organizationId = response.project.organizationId;
    }
    catch (error) {
        throw new Error('Failed to backfill organizationId', { cause: error });
    }
    if (!organizationId)
        throw new Error('No organizationId found');
    writeConfigFile({ blueprintFilePath, organizationId });
    return organizationId;
}
